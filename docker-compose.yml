services:
  # PostgreSQL Database (simplified for ARM64)
  database:
    image: postgres:15-alpine
    container_name: servicerw_db
    environment:
      POSTGRES_DB: servicerw
      POSTGRES_USER: servicerw_user
      POSTGRES_PASSWORD: servicerw_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    networks:
      - servicerw_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U servicerw_user -d servicerw"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: servicerw_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - servicerw_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: servicerw_backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: servicerw
      DB_USER: servicerw_user
      DB_PASSWORD: servicerw_password
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev_jwt_secret_change_in_production_12345
      FRONTEND_URL: http://localhost:3000
      LOG_LEVEL: debug
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads:/app/uploads
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - servicerw_network
    restart: unless-stopped
    command: npm run dev

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: servicerw_frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - servicerw_network
    restart: unless-stopped
    command: npm run dev



volumes:
  postgres_data:
  redis_data:
  backend_uploads:
  frontend_node_modules:

networks:
  servicerw_network:
    driver: bridge
